services:
  app:
    image: gathering-21-build:latest
    environment:
      DEV_DB_HOST: gathering_project-db-1
      DEV_DB_PORT: ${DEV_DB_PORT}
      REDIS_HOST: gathering_project-redis-1
      REDIS_PORT: ${REDIS_PORT}
      SPRING_DATASOURCE_INITIALIZATION_MODE: always  # 스프링부트에서 데이터베이스 초기화 로직을 실행할 수 있도록 설정
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${DEV_SERVER_PORT}:${DEV_SERVER_PORT}"
    env_file:
      - .env.dev
    depends_on:
      - db
      - redis
    networks:
      - app-network
    restart: on-failure

  db:
    image: mysql:8.0
    container_name: gathering_project-db-1
    environment:
      MYSQL_ROOT_PASSWORD: ${DEV_DB_PASS}
      MYSQL_DATABASE: ${DEV_DB_NAME}
    ports:
      - "${DEV_DB_PORT}:${DEV_DB_PORT}"
    networks:
      - app-network
    volumes:
      - db-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "--silent"]
      interval: 10s
      timeout: 5s
      retries: 10  # 초기화가 오래 걸리는 경우를 대비하여 재시도 횟수 증가
    restart: always  # db 서비스가 오류 발생 시 자동 재시작

  redis:
    image: redis:latest
    container_name: gathering_project-redis-1
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - app-network
    volumes:
      - redis-data:/data
    restart: always

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ulimits:
      memlock:
          soft: -1
          hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s  config/certs/ca/ca.crt https://localhost:9200 | grep -q 'cluster_uuid'"
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200 # https
      - 9300:9300 # tcp
    networks:
        - app-network

  es02:
    container_name: es02
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    environment:
      - node.name=es02
      - cluster.name=docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200 | grep -q 'cluster_uuid'" ]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - data02:/usr/share/elasticsearch/data
    ports:
      - 9201:9200
      - 9301:9300
    networks:
      - app-network

  es03:
    container_name: es03
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    environment:
      - node.name=es03
      - cluster.name=docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200 | grep -q 'cluster_uuid'" ]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - data03:/usr/share/elasticsearch/data
    ports:
      - 9202:9200
      - 9302:9300
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.1
    container_name: kibana
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_HOSTS: http://es01:9200
    ports:
      - 5601:5601
    depends_on:
       - es01
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
  redis-data:
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local

