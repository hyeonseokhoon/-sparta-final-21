name: Deploy to ECR

on:
  push:
    branches:
      - main
      - feature/gyeol

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

#      - name: Actions 보안설정(이미지 스캔)
#        run: |
#          docker build -t gathering-21-build:latest .
#          docker run --rm aquasec/trivy:latest --image gathering-21-build:latest

      - name: JDK 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: AWS ECR에 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: ap-northeast-2

      - name: 환경 변수 설정 및 dev.yml 생성
        env:
          DEV_SERVER_PORT: ${{ secrets.DEV_SERVER_PORT }}
          DEV_DB_HOST: 127.0.0.1
          DEV_DB_PORT: 3306
          DEV_DB_NAME: ${{ secrets.DEV_DB_NAME }}
          DEV_DB_USER: ${{ secrets.DEV_DB_USER }}
          DEV_DB_PASS: ${{ secrets.DEV_DB_PASS }}
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          S3_PLACE: ${{ secrets.S3_PLACE }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          S3_URL: ${{ secrets.S3_URL }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          SQS_PLACE: ${{ secrets.SQS_PLACE }}
          SQS_URL: ${{ secrets.SQS_URL }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          JWT_EXPIRATION_TIME: ${{ secrets.JWT_EXPIRATION_TIME }}
          JWT_REFRESH_EXPIRATION_TIME: ${{ secrets.JWT_REFRESH_EXPIRATION_TIME }}
          DEFAULT_PROFILE_IMAGE_URL: ${{ secrets.DEFAULT_PROFILE_IMAGE_URL }}
          KAKAO_MAP_REST_API: ${{ secrets.KAKAO_MAP_REST_API }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_SENDER: ${{ secrets.MAIL_SENDER }}
          BASE_URL: ${{ secrets.BASE_URL }}
        run: |
          cat <<EOT >> src/main/resources/application-dev.yml
          server:
            port: ${{env.DEV_SERVER_PORT}}

          spring:
            datasource:
              url: jdbc:mysql://${{env.DEV_DB_HOST}}:${{env.DEV_DB_PORT}}/${{env.DEV_DB_NAME}}?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Seoul
              username: ${{env.DEV_DB_USER}}
              password: ${{env.DEV_DB_PASS}}
              driver-class-name: com.mysql.cj.jdbc.Driver

            jpa:
              hibernate:
                ddl-auto: update
              properties:
                hibernate:
                  show_sql: true
                  format_sql: true
              open-in-view: false

            data:
              redis:
                host: ${{env.REDIS_HOST}}
                port: ${{env.REDIS_PORT}}
                repositories:
                  enabled: false

            security:
              oauth2:
                client:
                  registration:
                    kakao:
                      client-id: ${{env.KAKAO_CLIENT_ID}}
                      client-secret: ${{env.KAKAO_CLIENT_SECRET}}
                      scope:
                        - profile_nickname
                        - profile_image
                        - account_email
                      redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
                      client-authentication-method: client_secret_post
                      authorization-grant-type: authorization_code

                  provider:
                    kakao:
                      authorization-uri: https://kauth.kakao.com/oauth/authorize
                      token-uri: https://kauth.kakao.com/oauth/token
                      user-info-uri: https://kapi.kakao.com/v2/user/me
                      user-name-attribute: id

          aws:
            s3:
              region: ${{env.S3_PLACE}}
              access-key: ${{env.AWS_ACCESS_KEY}}
              secret-key: ${{env.AWS_SECRET_KEY}}
              url: ${S3_URL}
              bucket-name: ${{env.S3_BUCKET_NAME}}
            sqs:
              region: ${{env.SQS_PLACE}}
              access-key: ${{env.AWS_ACCESS_KEY}}
              secret-key: ${{env.AWS_SECRET_KEY}}
              queue-url: ${{env.SQS_URL}}

          logging:
            level:
              com.sparta.gathering: INFO
              org.springframework.batch.core.configuration.annotation.BatchRegistrar: warn

          jwt:
            secret: ${{env.JWT_SECRET_KEY}}
            expiration: ${{env.JWT_EXPIRATION_TIME}}
            refresh-expiration: ${{env.JWT_REFRESH_EXPIRATION_TIME}}

          default:
            profile:
              image:
                url: ${{env.DEFAULT_PROFILE_IMAGE_URL}}

          kakao:
            map:
              api-key: ${{env.KAKAO_MAP_REST_API}}

          slack:
            webhook:
              url: ${{env.SLACK_WEBHOOK_URL}}

          mail:
            host: ${{env.MAIL_HOST}}
            port: ${{env.MAIL_PORT}}
            username: ${{env.MAIL_USERNAME}}
            password: ${{env.MAIL_PASSWORD}}
            sender: ${{env.MAIL_SENDER}}
            properties:
              mail:
                smtp:
                  auth: true
                  starttls:
                    enable: true
                transport:
                  protocol: smtp
                debug: false

          app:
            base-url: ${{env.BASE_URL}}
          EOT

      - name: Docker Compose로 이미지 빌드 및 푸시
        env:
          AWS_REGION: ap-northeast-2
          ECR_REPOSITORY: gathering-21/monolog
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Docker Compose 를 사용하여 서비스 빌드
          docker compose -f docker-compose.yml build
          
          # 태그를 설정하고 ECR 로 푸시
          docker tag gathering-21-build:latest $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7}

          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7}"
          
          # latest 태그로도 푸시
          docker tag gathering-21-build:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
