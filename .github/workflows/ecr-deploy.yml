name: Deploy to ECR

on:
  push:
    branches:
      - main
      - feature/seokhoon

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      REDIS_PORT: 6379
      DEV_SERVER_PORT: 3306

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: AWS ECR에 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_ACCESS_KEY_ID: AKIAST6S7OOMBEVHKCPH
          AWS_SECRET_ACCESS_KEY: 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
          AWS_REGION: ap-northeast-2

      - name: Docker Compose로 이미지 빌드 및 푸시
        env:
          AWS_REGION: ap-northeast-2
          ECR_REPOSITORY: gathering-21/monolog
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Docker Compose 를 사용하여 서비스 빌드
          docker compose -f docker-compose.yml build
          
          # 태그를 설정하고 ECR 로 푸시
          docker tag gathering-21-build:latest $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7}
          # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7}

          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7}"
          
          # latest 태그로도 푸시
          docker tag gathering-21-build:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
