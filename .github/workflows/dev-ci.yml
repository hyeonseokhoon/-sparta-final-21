name: Dev CI

on:
  push:
    branches:
      - dev  # dev 브랜치에 푸시될 때 실행
  pull_request:
    branches:
      - dev  # dev 브랜치에 대한 PR 생성 시 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Gradle Wrapper에 실행 권한 부여
        run: chmod +x ./gradlew

      - name: Gradle 의존성 캐시 사용
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches/modules-2/files-2.1
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: JDK 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 환경 변수 설정 및 dev.yml 생성
        env:
          DEV_SERVER_PORT: ${{ secrets.DEV_SERVER_PORT }}
          DEV_DB_HOST: ${{ secrets.DEV_DB_HOST }}
          DEV_DB_PORT: ${{ secrets.DEV_DB_PORT }}
          DEV_DB_NAME: ${{ secrets.DEV_DB_NAME }}
          DEV_DB_USER: ${{ secrets.DEV_DB_USER }}
          DEV_DB_PASS: ${{ secrets.DEV_DB_PASS }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          S3_PLACE: ${{ secrets.S3_PLACE }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          S3_URL: ${{ secrets.S3_URL }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          SQS_PLACE: ${{ secrets.SQS_PLACE }}
          SQS_URL: ${{ secrets.SQS_URL }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          JWT_EXPIRATION_TIME: ${{ secrets.JWT_EXPIRATION_TIME }}
          JWT_REFRESH_EXPIRATION_TIME: ${{ secrets.JWT_REFRESH_EXPIRATION_TIME }}
          DEFAULT_PROFILE_IMAGE_URL: ${{ secrets.DEFAULT_PROFILE_IMAGE_URL }}
          KAKAO_MAP_REST_API: ${{ secrets.KAKAO_MAP_REST_API }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_SENDER: ${{ secrets.MAIL_SENDER }}
          BASE_URL: ${{ secrets.BASE_URL }}
        run: |
          cat <<EOT >> src/main/resources/application-test.yml
          server:
            port: ${DEV_SERVER_PORT}

          spring:
            application:
              name: gathering
            datasource:
              url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
              username: test
              password:
              driver-class-name: org.h2.Driver

            jpa:
              hibernate:
                ddl-auto: create-drop
              properties:
                hibernate:
                  dialect: org.hibernate.dialect.H2Dialect

            data:
              redis:
                host: ${REDIS_HOST}
                port: ${REDIS_PORT}
                repositories:
                  enabled: false

            security:
              oauth2:
                client:
                  registration:
                    kakao:
                      client-id: ${KAKAO_CLIENT_ID}
                      client-secret: ${KAKAO_CLIENT_SECRET}
                      scope:
                        - profile_nickname
                        - profile_image
                        - account_email
                      redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
                      client-authentication-method: client_secret_post
                      authorization-grant-type: authorization_code

                provider:
                  kakao:
                    authorization-uri: https://kauth.kakao.com/oauth/authorize
                    token-uri: https://kauth.kakao.com/oauth/token
                    user-info-uri: https://kapi.kakao.com/v2/user/me
                    user-name-attribute: id

          aws:
            s3:
              region: ${S3_PLACE}
              access-key: ${AWS_ACCESS_KEY}
              secret-key: ${AWS_SECRET_KEY}
              url: ${S3_URL}
              bucket-name: ${S3_BUCKET_NAME}
            sqs:
              region: ${SQS_PLACE}
              access-key: ${AWS_ACCESS_KEY}
              secret-key: ${AWS_SECRET_KEY}
              queue-url: ${SQS_URL}

          logging:
            level:
              com.sparta.gathering: INFO
              org.springframework.batch.core.configuration.annotation.BatchRegistrar: warn

          jwt:
            secret: ${JWT_SECRET_KEY}
            expiration: ${JWT_EXPIRATION_TIME}
            refresh-expiration: ${JWT_REFRESH_EXPIRATION_TIME}

          default:
            profile:
              image:
                url: ${DEFAULT_PROFILE_IMAGE_URL}

          kakao:
            map:
              api-key: ${KAKAO_MAP_REST_API}

          slack:
            webhook:
              url: ${SLACK_WEBHOOK_URL}

          mail:
            host: ${MAIL_HOST}
            port: ${MAIL_PORT}
            username: ${MAIL_USERNAME}
            password: ${MAIL_PASSWORD}
            sender: ${MAIL_SENDER}
            properties:
              mail:
                smtp:
                  auth: true
                  starttls:
                    enable: true
                transport:
                  protocol: smtp
                debug: false

          app:
            base-url: ${BASE_URL}
          EOT

      - name: Checkstyle 코드 품질 검사
        run: ./gradlew clean checkstyleMain --no-build-cache

      - name: Checkstyle HTML 보고서 저장
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-html-report
          path: build/reports/checkstyle/checkstyleMain.html

      - name: Checkstyle 위반 확인
        run: |
          violations=$(grep -c '<error ' build/reports/checkstyle/checkstyleMain.xml || true)
          echo "Found $violations Checkstyle violations."
          if [ "$violations" -gt 0 ]; then
            echo "Checkstyle violations found: $violations"
            exit 1
          else
            echo "No Checkstyle violations found."
          fi

      - name: 빌드 및 테스트 실행
        run: |
          ./gradlew build test \
          --no-daemon \
          --build-cache
