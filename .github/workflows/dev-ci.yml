name: Dev CI

on:
  push:
    branches:
      - dev  # dev 브랜치에 푸시될 때 실행
  pull_request:
    branches:
      - dev  # dev 브랜치에 대한 PR 생성 시 실행

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      redis:
        image: redis:6.2
        ports:
          - 6379:6379

    steps:
      # Step 1: 코드 체크아웃
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      # Step 2: Gradle Wrapper 실행 권한 설정
      - name: Gradle Wrapper 실행 권한
        run: chmod +x ./gradlew

      # Step 3: Gradle 의존성 캐시 사용
      - name: Gradle 의존성 캐시
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches/modules-2/files-2.1
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      # Step 4: JDK 설정
      - name: JDK 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 5: Checkstyle 실행
      - name: Checkstyle 코드 품질 검사
        run: ./gradlew clean checkstyleMain --no-build-cache

      # Step 6: Checkstyle HTML 보고서 저장
      - name: Checkstyle HTML 보고서 저장
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-html-report
          path: build/reports/checkstyle/checkstyleMain.html

      # Step 7: Checkstyle 위반 확인
      - name: Checkstyle 위반 확인
        run: |
          violations=$(grep -c '<error ' build/reports/checkstyle/checkstyleMain.xml || true)
          if [ "$violations" -gt 0 ]; then
             echo "Checkstyle violations found: $violations"
             exit 1
           else
             echo "No Checkstyle violations found."
           fi

      # Step 8: 테스트 및 빌드 실행
      - name: 테스트 및 빌드 실행
        run: ./gradlew build test --no-daemon --build-cache

    env:
      # 개발 환경 MySQL
      DEV_DB_HOST: 127.0.0.1
      DEV_DB_PORT: 3306
      DEV_DB_NAME: test_db
      DEV_DB_USER: test_user
      DEV_DB_PASS: test_pass

      # JWT 설정
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      JWT_EXPIRATION_TIME: ${{ secrets.JWT_EXPIRATION_TIME }}

      # OAuth2 (Kakao) 설정
      KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
      KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}

      # Kakao Map 설정
      KAKAO_MAP_REST_API: ${{ secrets.KAKAO_MAP_REST_API }}

      # AWS S3 설정
      S3_PLACE: ${{ secrets.S3_PLACE }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      S3_URL: ${{ secrets.S3_URL }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

      # Redis 설정
      REDIS_HOST: 127.0.0.1
      REDIS_PORT: 6379

      # 기본 프로필 이미지 URL
      DEFAULT_PROFILE_IMAGE_URL: ${{ secrets.DEFAULT_PROFILE_IMAGE_URL }}

      # Slack Webhook 설정
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # Mail 설정
      MAIL_HOST: ${{ secrets.MAIL_HOST }}
      MAIL_PORT: ${{ secrets.MAIL_PORT }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      MAIL_SENDER: ${{ secrets.MAIL_SENDER }}

      # 기본 URL
      BASE_URL: ${{ secrets.BASE_URL }}
